PROJECT(ROSS_TOP)
CMAKE_MINIMUM_REQUIRED(VERSION 2.6)
ENABLE_TESTING()
INCLUDE(CTest)

INCLUDE(CTest)

INCLUDE(CheckTypeSize)
INCLUDE(CheckIncludeFiles)
INCLUDE(CheckFunctionExists)
INCLUDE(CheckLibraryExists)

CHECK_INCLUDE_FILES(dlfcn.h HAVE_DLFCN_H)
CHECK_INCLUDE_FILES(errno.h HAVE_ERRNO_H)
CHECK_INCLUDE_FILES(fcntl.h HAVE_FCNTL_H)
CHECK_INCLUDE_FILES(float.h HAVE_FLOAT_H)
CHECK_INCLUDE_FILES(inttypes.h HAVE_INTTYPES_H)
CHECK_INCLUDE_FILES(pthread.h HAVE_PTHREAD_H)
CHECK_INCLUDE_FILES(limits.h HAVE_LIMITS_H)
CHECK_INCLUDE_FILES(math.h HAVE_MATH_H)
CHECK_INCLUDE_FILES(memory.h HAVE_MEMORY_H)
CHECK_INCLUDE_FILES(signal.h HAVE_SIGNAL_H)
CHECK_INCLUDE_FILES(stdarg.h HAVE_STDARG_H)
CHECK_INCLUDE_FILES(stdint.h HAVE_STDINT_H)
CHECK_INCLUDE_FILES(stdio.h HAVE_STDIO_H)
CHECK_INCLUDE_FILES(stdlib.h HAVE_STDLIB_H)
CHECK_INCLUDE_FILES(strings.h HAVE_STRINGS_H)
CHECK_INCLUDE_FILES(string.h HAVE_STRING_H)
CHECK_INCLUDE_FILES(sys/stat.h HAVE_SYS_STAT_H)
CHECK_INCLUDE_FILES(sys/time.h HAVE_SYS_TIME_H)
CHECK_INCLUDE_FILES(sys/types.h HAVE_SYS_TYPES_H)
CHECK_INCLUDE_FILES(unistd.h HAVE_UNISTD_H)
CHECK_INCLUDE_FILES(bglpersonality.h HAVE_BGLPERSONALITY_H)

CHECK_LIBRARY_EXISTS(m sin "" HAVE_LIBM)
CHECK_LIBRARY_EXISTS(mass sin "" HAVE_LIBMASS)
CHECK_LIBRARY_EXISTS(pthread pthread_create /usr/lib HAVE_LIBPTHREAD)
CHECK_LIBRARY_EXISTS(z deflateReset /usr/lib HAVE_LIBZ)

CHECK_FUNCTION_EXISTS(bzero HAVE_BZERO)
CHECK_FUNCTION_EXISTS(floor HAVE_FLOOR)
CHECK_FUNCTION_EXISTS(gettimeofday HAVE_GETTIMEOFDAY)
CHECK_FUNCTION_EXISTS(malloc HAVE_MALLOC)
CHECK_FUNCTION_EXISTS(memcpy HAVE_MEMCPY)
CHECK_FUNCTION_EXISTS(pow HAVE_POW)
CHECK_FUNCTION_EXISTS(sigaction HAVE_SIGACTION)
CHECK_FUNCTION_EXISTS(vprintf HAVE_VPRINTF)

CHECK_TYPE_SIZE("short"         SIZEOF_SHORT       )
CHECK_TYPE_SIZE("int"           SIZEOF_INT         )
CHECK_TYPE_SIZE("float"         SIZEOF_FLOAT       )
CHECK_TYPE_SIZE("double"        SIZEOF_DOUBLE      )
CHECK_TYPE_SIZE("long"          SIZEOF_LONG        )
CHECK_TYPE_SIZE("long int"      SIZEOF_LONG_INT    )
CHECK_TYPE_SIZE("long long"     SIZEOF_LONG_LONG   )
CHECK_TYPE_SIZE("uint"          SIZEOF_UINT        )
CHECK_TYPE_SIZE("void *"        SIZEOF_VPTR        )

#SET(QUEUE      calendar) #Calendar Queue
#SET(QUEUE      heap) #Push/Down Heap
SET(QUEUE       splay) #Splay Tree

SET(RAND           clcg4)
OPTION(RAND_NORMAL "Turn on state for normal distribution" ON)

#MEMORY is either on or off depending on whether or not we desire
#memory buffers.  If it's not set to YES, it defaults to NO
OPTION(MEMORY	  "ROSS Memory Buffers (membufs)"     ON)
SET(MEMORY        YES)

OPTION(TIMING	   "Perform ROSS timings"	ON)

OPTION(WITH_NETDMF "NetDMF support"             OFF)

OPTION(WITH_ROSSNET "Build ROSS.Net?"		OFF)

SET(NETWORK       mpi)
#SET(NETWORK      tcp)

SET(GVT           mpi_allreduce)
#SET(GVT          7oclock)

SET(VALID_ARCH NO)
SET(ARCH $ENV{ARCH} CACHE STRING "Target architecture")
MARK_AS_ADVANCED(ARCH)
IF(NOT ARCH)
	MESSAGE(FATAL_ERROR
		"ARCH not defined!\n"
		"Please set ARCH to be one of (i386 | bgl | bgp | x86_64 | ppc64)")
ENDIF(NOT ARCH)

IF(ARCH STREQUAL i386)
        SET(VALID_ARCH YES)
        #SET(CC	 mpicc)
        SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g -Wall")
        ADD_DEFINITIONS(-D_GNU_SOURCE)
		ADD_DEFINITIONS(-DI386)
        SET(CLOCK       i386)
ENDIF(ARCH STREQUAL i386)

IF(ARCH STREQUAL bgl)
       SET(VALID_ARCH YES)
       #SET(CC   mpixlc)
       #SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g -O0")
       SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -qflag=i:i -qattr=full -O5")
       SET(OPTIONS "-qtune=440 -qarch=440d")
       SET(CLOCK   bgl)
	   ADD_DEFINITIONS(-DBLUE_GENE)
ENDIF(ARCH STREQUAL bgl)

IF(ARCH STREQUAL bgp)
       SET(VALID_ARCH YES)
       #SET(CC   mpixlc)
       SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -qflag=i:i -qattr=full -O5")
       SET(OPTIONS "-qtune=450 -qarch=450d")
       SET(CLOCK   bgl)
ENDIF(ARCH STREQUAL bgp)

IF(ARCH STREQUAL ppc64)
       SET(VALID_ARCH YES)
       #SET(CC   mpicc)
       SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g -Wall")
       ADD_DEFINITIONS(-D_GNU_SOURCE)
       SET(CLOCK       ppc)
ENDIF(ARCH STREQUAL ppc64)

IF(ARCH STREQUAL x86_64)
        SET(VALID_ARCH YES)
        #SET(CC	 mpicc)
        SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O6 -Wall")
        SET(CMAKE_CXX_FLAGS "${CMAKE_C_FLAGS}")
        ADD_DEFINITIONS(-D_GNU_SOURCE)
        ADD_DEFINITIONS(-DX86_64)
	SET(CLOCK       amd64)
ENDIF(ARCH STREQUAL x86_64)

IF(NOT VALID_ARCH)
       MESSAGE(FATAL_ERROR
		"ARCH not valid!\n"
		"Please set ARCH to be one of (i386 | bgl | bgp | x86_64 | ppc64)")
ENDIF(NOT VALID_ARCH)

ADD_SUBDIRECTORY(ross)
IF(WITH_ROSSNET)
	ADD_SUBDIRECTORY(rnf)
ENDIF(WITH_ROSSNET)

FIND_PACKAGE(Doxygen)

CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile.user.in
               ${CMAKE_BINARY_DIR}/Doxyfile.user)

IF(DOXYGEN_FOUND)
	OPTION(BUILD_DOXYGEN "Build Doxygen documentation" ON)
	IF(DOXYGEN_DOT_FOUND)
		OPTION(DEFAULT_GRAPHS "Build Default Doxygen Graphs" ON)	
		OPTION(CALL_GRAPHS "Build Doxygen Call Graphs" ON)
		OPTION(CALLER_GRAPHS "Build Doxygen Caller Graphs" ON)
	ENDIF(DOXYGEN_DOT_FOUND)	
ENDIF(DOXYGEN_FOUND)

CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile.user.in
	       ${CMAKE_BINARY_DIR}/Doxyfile.user)

IF(BUILD_DOXYGEN)
	IF(DOXYGEN_DOT_FOUND)
		SET(HAVE_DOT YES)
		IF(CALL_GRAPHS)
			SET(CALL_GRAPHS_ON YES)
		ELSE(CALL_GRAPHS)
			SET(CALL_GRAPHS_ON NO)
		ENDIF(CALL_GRAPHS)
		IF(CALLER_GRAPHS)
			SET(CALLER_GRAPHS_ON YES)
		ELSE(CALLER_GRAPHS)
			SET(CALLER_GRAPHS_ON NO)
		ENDIF(CALLER_GRAPHS)
		IF(DEFAULT_GRAPHS)
			SET(DEFAULT_GRAPHS_ON YES)
		ELSE(DEFAULT_GRAPHS)
			SET(DEFAULT_GRAPHS_ON NO)
		ENDIF(DEFAULT_GRAPHS)
	ELSE(DOXYGEN_DOT_FOUND)
		SET(HAVE_DOT NO)
		SET(CALL_GRAPHS_ON NO)
		SET(CALLER_GRAPHS_ON NO)
		SET(DEFAULT_GRAPHS_ON NO)
	ENDIF(DOXYGEN_DOT_FOUND)

	SET(DOXYGEN_OUTPUT ${CMAKE_BINARY_DIR}/docs/html/index.html)

	ADD_CUSTOM_COMMAND(
		OUTPUT ${DOXYGEN_OUTPUT}
		COMMAND ${CMAKE_COMMAND} -E echo_append "Building API Documentation..."
		COMMAND ${DOXYGEN_EXECUTABLE} ${CMAKE_BINARY_DIR}/Doxyfile.user
		COMMAND ${CMAKE_COMMAND} -E echo "Done."
	)

	ADD_CUSTOM_TARGET(apidoc ALL DEPENDS ${DOXYGEN_OUTPUT})
ENDIF(BUILD_DOXYGEN)
